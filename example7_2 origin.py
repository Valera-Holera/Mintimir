# example7_2
import numpy as np
import run_kut4
import euler
import matplotlib.pyplot as plt


# Общий вид дифференциального уравнения первого порядка:
# y' = f(x,y)
# Решение этого уравнения содержит произвольную константу (константу
# интегрирования). Чтобы найти эту константу, мы должны знать точку на
# кривой решения; то есть y должен быть указан при некотором значении х,
# скажем, при х = а. Запишем это вспомогательное условие в виде:
# y(a) = α
# Обыкновенное дифференциальное уравнение порядка n:
# y(n) = f(x,y,y',y'',y''',...,y(n-1))
# его можно преобразовать в n уравнений первого порядка, используем замену:
# y[0]=y, y[1]=y', y[2]=y'',..., y[n-1]=y(n-1)
# Эквивалентные уравнения первого порядка:
# y'[0]=y[1], y'[1]=y[2], y'[2]=y[3],..., y'[n]=f(x,y[0], y[1],..., y[n-1])
#
# Решение теперь требует знания n вспомогательных условий. Если эти условия
# заданы при одном и том же значении x, говорят, что это initial value
# problem. Тогда начальные условия имеют вид:
# y[0](α)=α[0], y[1](α)=α[1],..., y[n-1](α)=α[n-1]
# Если y[i] заданы при разных x, то это boundary value problem.
# В этой главе рассматриваются только initial value problems, так как
# bounndary более сложны для решения. Также мы будем использовать
# векторную запись уравнений:
# _    _    _   _      _
# y' = F(x, y), y(a) = α
# где:
# _    _
# F(x, y) =| y[1] |
#          | y[2] |
#          |  .   |
#          |  .   |
#          |  .   |
#          |f(x,y)|


def F(x, y):
    F = np.zeros(2)
    F[0] = y[1]
    F[1] = -y[0]
    return F


x = 0.0  # Start of integration
xStop = 10.0  # End of integration
y = np.array([1.0, 0.0])  # Initial values of {y}
h = 0.25  # Step size
X, Y = run_kut4.integrate(F, x, y, xStop, h)
yExact = np.cos(X)
plt.plot(X, Y[:, 0], 'o', X, yExact, '-')
plt.grid(True)
plt.xlabel('x')
plt.ylabel('y')
plt.legend(('Numerical', 'Exact'), loc=0)
plt.show()

print(Y[-1] - yExact[-1])
